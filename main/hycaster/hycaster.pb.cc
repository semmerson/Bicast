// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hycaster.proto

#include "hycaster.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_hycaster_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SockAddr_hycaster_2eproto;
namespace hycast {
class SubReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubReq> _instance;
} _SubReq_default_instance_;
class SockAddrDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SockAddr> _instance;
} _SockAddr_default_instance_;
class SubRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubResp> _instance;
} _SubResp_default_instance_;
}  // namespace hycast
static void InitDefaultsscc_info_SockAddr_hycaster_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hycast::_SockAddr_default_instance_;
    new (ptr) ::hycast::SockAddr();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hycast::SockAddr::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SockAddr_hycaster_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SockAddr_hycaster_2eproto}, {}};

static void InitDefaultsscc_info_SubReq_hycaster_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hycast::_SubReq_default_instance_;
    new (ptr) ::hycast::SubReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hycast::SubReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubReq_hycaster_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubReq_hycaster_2eproto}, {}};

static void InitDefaultsscc_info_SubResp_hycaster_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hycast::_SubResp_default_instance_;
    new (ptr) ::hycast::SubResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hycast::SubResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubResp_hycaster_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SubResp_hycaster_2eproto}, {
      &scc_info_SockAddr_hycaster_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_hycaster_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_hycaster_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_hycaster_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_hycaster_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hycast::SubReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hycast::SockAddr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hycast::SockAddr, sock_addr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hycast::SubResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hycast::SubResp, mcast_group_),
  PROTOBUF_FIELD_OFFSET(::hycast::SubResp, prod_lifetime_),
  PROTOBUF_FIELD_OFFSET(::hycast::SubResp, peer_servers_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::hycast::SubReq)},
  { 5, -1, sizeof(::hycast::SockAddr)},
  { 11, -1, sizeof(::hycast::SubResp)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hycast::_SubReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hycast::_SockAddr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hycast::_SubResp_default_instance_),
};

const char descriptor_table_protodef_hycaster_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016hycaster.proto\022\006hycast\"\010\n\006SubReq\"\035\n\010So"
  "ckAddr\022\021\n\tsock_addr\030\001 \001(\t\"o\n\007SubResp\022%\n\013"
  "mcast_group\030\001 \001(\0132\020.hycast.SockAddr\022\025\n\rp"
  "rod_lifetime\030\002 \001(\r\022&\n\014peer_servers\030\003 \003(\013"
  "2\020.hycast.SockAddr2:\n\010Hycaster\022.\n\tSubscr"
  "ibe\022\016.hycast.SubReq\032\017.hycast.SubResp\"\000b\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_hycaster_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_hycaster_2eproto_sccs[3] = {
  &scc_info_SockAddr_hycaster_2eproto.base,
  &scc_info_SubReq_hycaster_2eproto.base,
  &scc_info_SubResp_hycaster_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_hycaster_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_hycaster_2eproto = {
  false, false, descriptor_table_protodef_hycaster_2eproto, "hycaster.proto", 246,
  &descriptor_table_hycaster_2eproto_once, descriptor_table_hycaster_2eproto_sccs, descriptor_table_hycaster_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_hycaster_2eproto::offsets,
  file_level_metadata_hycaster_2eproto, 3, file_level_enum_descriptors_hycaster_2eproto, file_level_service_descriptors_hycaster_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_hycaster_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_hycaster_2eproto)), true);
namespace hycast {

// ===================================================================

void SubReq::InitAsDefaultInstance() {
}
class SubReq::_Internal {
 public:
};

SubReq::SubReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hycast.SubReq)
}
SubReq::SubReq(const SubReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hycast.SubReq)
}

void SubReq::SharedCtor() {
}

SubReq::~SubReq() {
  // @@protoc_insertion_point(destructor:hycast.SubReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SubReq::ArenaDtor(void* object) {
  SubReq* _this = reinterpret_cast< SubReq* >(object);
  (void)_this;
}
void SubReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubReq& SubReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubReq_hycaster_2eproto.base);
  return *internal_default_instance();
}


void SubReq::Clear() {
// @@protoc_insertion_point(message_clear_start:hycast.SubReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hycast.SubReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hycast.SubReq)
  return target;
}

size_t SubReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hycast.SubReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hycast.SubReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SubReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hycast.SubReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hycast.SubReq)
    MergeFrom(*source);
  }
}

void SubReq::MergeFrom(const SubReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hycast.SubReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hycast.SubReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubReq::CopyFrom(const SubReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hycast.SubReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubReq::IsInitialized() const {
  return true;
}

void SubReq::InternalSwap(SubReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SockAddr::InitAsDefaultInstance() {
}
class SockAddr::_Internal {
 public:
};

SockAddr::SockAddr(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hycast.SockAddr)
}
SockAddr::SockAddr(const SockAddr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sock_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sock_addr().empty()) {
    sock_addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sock_addr(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:hycast.SockAddr)
}

void SockAddr::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SockAddr_hycaster_2eproto.base);
  sock_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SockAddr::~SockAddr() {
  // @@protoc_insertion_point(destructor:hycast.SockAddr)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SockAddr::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sock_addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SockAddr::ArenaDtor(void* object) {
  SockAddr* _this = reinterpret_cast< SockAddr* >(object);
  (void)_this;
}
void SockAddr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SockAddr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SockAddr& SockAddr::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SockAddr_hycaster_2eproto.base);
  return *internal_default_instance();
}


void SockAddr::Clear() {
// @@protoc_insertion_point(message_clear_start:hycast.SockAddr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sock_addr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SockAddr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string sock_addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_sock_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hycast.SockAddr.sock_addr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SockAddr::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hycast.SockAddr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sock_addr = 1;
  if (this->sock_addr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sock_addr().data(), static_cast<int>(this->_internal_sock_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hycast.SockAddr.sock_addr");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sock_addr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hycast.SockAddr)
  return target;
}

size_t SockAddr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hycast.SockAddr)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sock_addr = 1;
  if (this->sock_addr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sock_addr());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SockAddr::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hycast.SockAddr)
  GOOGLE_DCHECK_NE(&from, this);
  const SockAddr* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SockAddr>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hycast.SockAddr)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hycast.SockAddr)
    MergeFrom(*source);
  }
}

void SockAddr::MergeFrom(const SockAddr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hycast.SockAddr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sock_addr().size() > 0) {
    _internal_set_sock_addr(from._internal_sock_addr());
  }
}

void SockAddr::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hycast.SockAddr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SockAddr::CopyFrom(const SockAddr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hycast.SockAddr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SockAddr::IsInitialized() const {
  return true;
}

void SockAddr::InternalSwap(SockAddr* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sock_addr_.Swap(&other->sock_addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SockAddr::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubResp::InitAsDefaultInstance() {
  ::hycast::_SubResp_default_instance_._instance.get_mutable()->mcast_group_ = const_cast< ::hycast::SockAddr*>(
      ::hycast::SockAddr::internal_default_instance());
}
class SubResp::_Internal {
 public:
  static const ::hycast::SockAddr& mcast_group(const SubResp* msg);
};

const ::hycast::SockAddr&
SubResp::_Internal::mcast_group(const SubResp* msg) {
  return *msg->mcast_group_;
}
SubResp::SubResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  peer_servers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hycast.SubResp)
}
SubResp::SubResp(const SubResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      peer_servers_(from.peer_servers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mcast_group()) {
    mcast_group_ = new ::hycast::SockAddr(*from.mcast_group_);
  } else {
    mcast_group_ = nullptr;
  }
  prod_lifetime_ = from.prod_lifetime_;
  // @@protoc_insertion_point(copy_constructor:hycast.SubResp)
}

void SubResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubResp_hycaster_2eproto.base);
  ::memset(&mcast_group_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prod_lifetime_) -
      reinterpret_cast<char*>(&mcast_group_)) + sizeof(prod_lifetime_));
}

SubResp::~SubResp() {
  // @@protoc_insertion_point(destructor:hycast.SubResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete mcast_group_;
}

void SubResp::ArenaDtor(void* object) {
  SubResp* _this = reinterpret_cast< SubResp* >(object);
  (void)_this;
}
void SubResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubResp& SubResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubResp_hycaster_2eproto.base);
  return *internal_default_instance();
}


void SubResp::Clear() {
// @@protoc_insertion_point(message_clear_start:hycast.SubResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  peer_servers_.Clear();
  if (GetArena() == nullptr && mcast_group_ != nullptr) {
    delete mcast_group_;
  }
  mcast_group_ = nullptr;
  prod_lifetime_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .hycast.SockAddr mcast_group = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mcast_group(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 prod_lifetime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          prod_lifetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .hycast.SockAddr peer_servers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_peer_servers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hycast.SubResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .hycast.SockAddr mcast_group = 1;
  if (this->has_mcast_group()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::mcast_group(this), target, stream);
  }

  // uint32 prod_lifetime = 2;
  if (this->prod_lifetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_prod_lifetime(), target);
  }

  // repeated .hycast.SockAddr peer_servers = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_peer_servers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_peer_servers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hycast.SubResp)
  return target;
}

size_t SubResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hycast.SubResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hycast.SockAddr peer_servers = 3;
  total_size += 1UL * this->_internal_peer_servers_size();
  for (const auto& msg : this->peer_servers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .hycast.SockAddr mcast_group = 1;
  if (this->has_mcast_group()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mcast_group_);
  }

  // uint32 prod_lifetime = 2;
  if (this->prod_lifetime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_prod_lifetime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hycast.SubResp)
  GOOGLE_DCHECK_NE(&from, this);
  const SubResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hycast.SubResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hycast.SubResp)
    MergeFrom(*source);
  }
}

void SubResp::MergeFrom(const SubResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hycast.SubResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  peer_servers_.MergeFrom(from.peer_servers_);
  if (from.has_mcast_group()) {
    _internal_mutable_mcast_group()->::hycast::SockAddr::MergeFrom(from._internal_mcast_group());
  }
  if (from.prod_lifetime() != 0) {
    _internal_set_prod_lifetime(from._internal_prod_lifetime());
  }
}

void SubResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hycast.SubResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubResp::CopyFrom(const SubResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hycast.SubResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubResp::IsInitialized() const {
  return true;
}

void SubResp::InternalSwap(SubResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  peer_servers_.InternalSwap(&other->peer_servers_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubResp, prod_lifetime_)
      + sizeof(SubResp::prod_lifetime_)
      - PROTOBUF_FIELD_OFFSET(SubResp, mcast_group_)>(
          reinterpret_cast<char*>(&mcast_group_),
          reinterpret_cast<char*>(&other->mcast_group_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubResp::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace hycast
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::hycast::SubReq* Arena::CreateMaybeMessage< ::hycast::SubReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hycast::SubReq >(arena);
}
template<> PROTOBUF_NOINLINE ::hycast::SockAddr* Arena::CreateMaybeMessage< ::hycast::SockAddr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hycast::SockAddr >(arena);
}
template<> PROTOBUF_NOINLINE ::hycast::SubResp* Arena::CreateMaybeMessage< ::hycast::SubResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hycast::SubResp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

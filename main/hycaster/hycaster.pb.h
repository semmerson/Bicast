// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hycaster.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_hycaster_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_hycaster_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_hycaster_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_hycaster_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_hycaster_2eproto;
namespace hycast {
class SockAddr;
class SockAddrDefaultTypeInternal;
extern SockAddrDefaultTypeInternal _SockAddr_default_instance_;
class SubReq;
class SubReqDefaultTypeInternal;
extern SubReqDefaultTypeInternal _SubReq_default_instance_;
class SubResp;
class SubRespDefaultTypeInternal;
extern SubRespDefaultTypeInternal _SubResp_default_instance_;
}  // namespace hycast
PROTOBUF_NAMESPACE_OPEN
template<> ::hycast::SockAddr* Arena::CreateMaybeMessage<::hycast::SockAddr>(Arena*);
template<> ::hycast::SubReq* Arena::CreateMaybeMessage<::hycast::SubReq>(Arena*);
template<> ::hycast::SubResp* Arena::CreateMaybeMessage<::hycast::SubResp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace hycast {

// ===================================================================

class SubReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hycast.SubReq) */ {
 public:
  inline SubReq() : SubReq(nullptr) {};
  virtual ~SubReq();

  SubReq(const SubReq& from);
  SubReq(SubReq&& from) noexcept
    : SubReq() {
    *this = ::std::move(from);
  }

  inline SubReq& operator=(const SubReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubReq& operator=(SubReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubReq* internal_default_instance() {
    return reinterpret_cast<const SubReq*>(
               &_SubReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SubReq& a, SubReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SubReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubReq* New() const final {
    return CreateMaybeMessage<SubReq>(nullptr);
  }

  SubReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubReq& from);
  void MergeFrom(const SubReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hycast.SubReq";
  }
  protected:
  explicit SubReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_hycaster_2eproto);
    return ::descriptor_table_hycaster_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:hycast.SubReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hycaster_2eproto;
};
// -------------------------------------------------------------------

class SockAddr PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hycast.SockAddr) */ {
 public:
  inline SockAddr() : SockAddr(nullptr) {};
  virtual ~SockAddr();

  SockAddr(const SockAddr& from);
  SockAddr(SockAddr&& from) noexcept
    : SockAddr() {
    *this = ::std::move(from);
  }

  inline SockAddr& operator=(const SockAddr& from) {
    CopyFrom(from);
    return *this;
  }
  inline SockAddr& operator=(SockAddr&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SockAddr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SockAddr* internal_default_instance() {
    return reinterpret_cast<const SockAddr*>(
               &_SockAddr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SockAddr& a, SockAddr& b) {
    a.Swap(&b);
  }
  inline void Swap(SockAddr* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SockAddr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SockAddr* New() const final {
    return CreateMaybeMessage<SockAddr>(nullptr);
  }

  SockAddr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SockAddr>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SockAddr& from);
  void MergeFrom(const SockAddr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SockAddr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hycast.SockAddr";
  }
  protected:
  explicit SockAddr(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_hycaster_2eproto);
    return ::descriptor_table_hycaster_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSockAddrFieldNumber = 1,
  };
  // string sock_addr = 1;
  void clear_sock_addr();
  const std::string& sock_addr() const;
  void set_sock_addr(const std::string& value);
  void set_sock_addr(std::string&& value);
  void set_sock_addr(const char* value);
  void set_sock_addr(const char* value, size_t size);
  std::string* mutable_sock_addr();
  std::string* release_sock_addr();
  void set_allocated_sock_addr(std::string* sock_addr);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sock_addr();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sock_addr(
      std::string* sock_addr);
  private:
  const std::string& _internal_sock_addr() const;
  void _internal_set_sock_addr(const std::string& value);
  std::string* _internal_mutable_sock_addr();
  public:

  // @@protoc_insertion_point(class_scope:hycast.SockAddr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sock_addr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hycaster_2eproto;
};
// -------------------------------------------------------------------

class SubResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hycast.SubResp) */ {
 public:
  inline SubResp() : SubResp(nullptr) {};
  virtual ~SubResp();

  SubResp(const SubResp& from);
  SubResp(SubResp&& from) noexcept
    : SubResp() {
    *this = ::std::move(from);
  }

  inline SubResp& operator=(const SubResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubResp& operator=(SubResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubResp* internal_default_instance() {
    return reinterpret_cast<const SubResp*>(
               &_SubResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SubResp& a, SubResp& b) {
    a.Swap(&b);
  }
  inline void Swap(SubResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubResp* New() const final {
    return CreateMaybeMessage<SubResp>(nullptr);
  }

  SubResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubResp& from);
  void MergeFrom(const SubResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hycast.SubResp";
  }
  protected:
  explicit SubResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_hycaster_2eproto);
    return ::descriptor_table_hycaster_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeerServersFieldNumber = 3,
    kMcastGroupFieldNumber = 1,
    kProdLifetimeFieldNumber = 2,
  };
  // repeated .hycast.SockAddr peer_servers = 3;
  int peer_servers_size() const;
  private:
  int _internal_peer_servers_size() const;
  public:
  void clear_peer_servers();
  ::hycast::SockAddr* mutable_peer_servers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hycast::SockAddr >*
      mutable_peer_servers();
  private:
  const ::hycast::SockAddr& _internal_peer_servers(int index) const;
  ::hycast::SockAddr* _internal_add_peer_servers();
  public:
  const ::hycast::SockAddr& peer_servers(int index) const;
  ::hycast::SockAddr* add_peer_servers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hycast::SockAddr >&
      peer_servers() const;

  // .hycast.SockAddr mcast_group = 1;
  bool has_mcast_group() const;
  private:
  bool _internal_has_mcast_group() const;
  public:
  void clear_mcast_group();
  const ::hycast::SockAddr& mcast_group() const;
  ::hycast::SockAddr* release_mcast_group();
  ::hycast::SockAddr* mutable_mcast_group();
  void set_allocated_mcast_group(::hycast::SockAddr* mcast_group);
  private:
  const ::hycast::SockAddr& _internal_mcast_group() const;
  ::hycast::SockAddr* _internal_mutable_mcast_group();
  public:
  void unsafe_arena_set_allocated_mcast_group(
      ::hycast::SockAddr* mcast_group);
  ::hycast::SockAddr* unsafe_arena_release_mcast_group();

  // uint32 prod_lifetime = 2;
  void clear_prod_lifetime();
  ::PROTOBUF_NAMESPACE_ID::uint32 prod_lifetime() const;
  void set_prod_lifetime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_prod_lifetime() const;
  void _internal_set_prod_lifetime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:hycast.SubResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hycast::SockAddr > peer_servers_;
  ::hycast::SockAddr* mcast_group_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prod_lifetime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hycaster_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SubReq

// -------------------------------------------------------------------

// SockAddr

// string sock_addr = 1;
inline void SockAddr::clear_sock_addr() {
  sock_addr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SockAddr::sock_addr() const {
  // @@protoc_insertion_point(field_get:hycast.SockAddr.sock_addr)
  return _internal_sock_addr();
}
inline void SockAddr::set_sock_addr(const std::string& value) {
  _internal_set_sock_addr(value);
  // @@protoc_insertion_point(field_set:hycast.SockAddr.sock_addr)
}
inline std::string* SockAddr::mutable_sock_addr() {
  // @@protoc_insertion_point(field_mutable:hycast.SockAddr.sock_addr)
  return _internal_mutable_sock_addr();
}
inline const std::string& SockAddr::_internal_sock_addr() const {
  return sock_addr_.Get();
}
inline void SockAddr::_internal_set_sock_addr(const std::string& value) {
  
  sock_addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SockAddr::set_sock_addr(std::string&& value) {
  
  sock_addr_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:hycast.SockAddr.sock_addr)
}
inline void SockAddr::set_sock_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sock_addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:hycast.SockAddr.sock_addr)
}
inline void SockAddr::set_sock_addr(const char* value,
    size_t size) {
  
  sock_addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:hycast.SockAddr.sock_addr)
}
inline std::string* SockAddr::_internal_mutable_sock_addr() {
  
  return sock_addr_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SockAddr::release_sock_addr() {
  // @@protoc_insertion_point(field_release:hycast.SockAddr.sock_addr)
  return sock_addr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SockAddr::set_allocated_sock_addr(std::string* sock_addr) {
  if (sock_addr != nullptr) {
    
  } else {
    
  }
  sock_addr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sock_addr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:hycast.SockAddr.sock_addr)
}
inline std::string* SockAddr::unsafe_arena_release_sock_addr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hycast.SockAddr.sock_addr)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return sock_addr_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SockAddr::unsafe_arena_set_allocated_sock_addr(
    std::string* sock_addr) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sock_addr != nullptr) {
    
  } else {
    
  }
  sock_addr_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sock_addr, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hycast.SockAddr.sock_addr)
}

// -------------------------------------------------------------------

// SubResp

// .hycast.SockAddr mcast_group = 1;
inline bool SubResp::_internal_has_mcast_group() const {
  return this != internal_default_instance() && mcast_group_ != nullptr;
}
inline bool SubResp::has_mcast_group() const {
  return _internal_has_mcast_group();
}
inline void SubResp::clear_mcast_group() {
  if (GetArena() == nullptr && mcast_group_ != nullptr) {
    delete mcast_group_;
  }
  mcast_group_ = nullptr;
}
inline const ::hycast::SockAddr& SubResp::_internal_mcast_group() const {
  const ::hycast::SockAddr* p = mcast_group_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hycast::SockAddr*>(
      &::hycast::_SockAddr_default_instance_);
}
inline const ::hycast::SockAddr& SubResp::mcast_group() const {
  // @@protoc_insertion_point(field_get:hycast.SubResp.mcast_group)
  return _internal_mcast_group();
}
inline void SubResp::unsafe_arena_set_allocated_mcast_group(
    ::hycast::SockAddr* mcast_group) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mcast_group_);
  }
  mcast_group_ = mcast_group;
  if (mcast_group) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hycast.SubResp.mcast_group)
}
inline ::hycast::SockAddr* SubResp::release_mcast_group() {
  auto temp = unsafe_arena_release_mcast_group();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hycast::SockAddr* SubResp::unsafe_arena_release_mcast_group() {
  // @@protoc_insertion_point(field_release:hycast.SubResp.mcast_group)
  
  ::hycast::SockAddr* temp = mcast_group_;
  mcast_group_ = nullptr;
  return temp;
}
inline ::hycast::SockAddr* SubResp::_internal_mutable_mcast_group() {
  
  if (mcast_group_ == nullptr) {
    auto* p = CreateMaybeMessage<::hycast::SockAddr>(GetArena());
    mcast_group_ = p;
  }
  return mcast_group_;
}
inline ::hycast::SockAddr* SubResp::mutable_mcast_group() {
  // @@protoc_insertion_point(field_mutable:hycast.SubResp.mcast_group)
  return _internal_mutable_mcast_group();
}
inline void SubResp::set_allocated_mcast_group(::hycast::SockAddr* mcast_group) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete mcast_group_;
  }
  if (mcast_group) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mcast_group);
    if (message_arena != submessage_arena) {
      mcast_group = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mcast_group, submessage_arena);
    }
    
  } else {
    
  }
  mcast_group_ = mcast_group;
  // @@protoc_insertion_point(field_set_allocated:hycast.SubResp.mcast_group)
}

// uint32 prod_lifetime = 2;
inline void SubResp::clear_prod_lifetime() {
  prod_lifetime_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubResp::_internal_prod_lifetime() const {
  return prod_lifetime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubResp::prod_lifetime() const {
  // @@protoc_insertion_point(field_get:hycast.SubResp.prod_lifetime)
  return _internal_prod_lifetime();
}
inline void SubResp::_internal_set_prod_lifetime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  prod_lifetime_ = value;
}
inline void SubResp::set_prod_lifetime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_prod_lifetime(value);
  // @@protoc_insertion_point(field_set:hycast.SubResp.prod_lifetime)
}

// repeated .hycast.SockAddr peer_servers = 3;
inline int SubResp::_internal_peer_servers_size() const {
  return peer_servers_.size();
}
inline int SubResp::peer_servers_size() const {
  return _internal_peer_servers_size();
}
inline void SubResp::clear_peer_servers() {
  peer_servers_.Clear();
}
inline ::hycast::SockAddr* SubResp::mutable_peer_servers(int index) {
  // @@protoc_insertion_point(field_mutable:hycast.SubResp.peer_servers)
  return peer_servers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hycast::SockAddr >*
SubResp::mutable_peer_servers() {
  // @@protoc_insertion_point(field_mutable_list:hycast.SubResp.peer_servers)
  return &peer_servers_;
}
inline const ::hycast::SockAddr& SubResp::_internal_peer_servers(int index) const {
  return peer_servers_.Get(index);
}
inline const ::hycast::SockAddr& SubResp::peer_servers(int index) const {
  // @@protoc_insertion_point(field_get:hycast.SubResp.peer_servers)
  return _internal_peer_servers(index);
}
inline ::hycast::SockAddr* SubResp::_internal_add_peer_servers() {
  return peer_servers_.Add();
}
inline ::hycast::SockAddr* SubResp::add_peer_servers() {
  // @@protoc_insertion_point(field_add:hycast.SubResp.peer_servers)
  return _internal_add_peer_servers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hycast::SockAddr >&
SubResp::peer_servers() const {
  // @@protoc_insertion_point(field_list:hycast.SubResp.peer_servers)
  return peer_servers_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace hycast

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_hycaster_2eproto
